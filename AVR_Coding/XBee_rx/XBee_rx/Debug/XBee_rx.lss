
XBee_rx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000232  000002c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000232  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080011c  0080011c  000002e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d8e  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000adb  00000000  00000000  0000119a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005b7  00000000  00000000  00001c75  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  0000222c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055c  00000000  00000000  0000241c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004df  00000000  00000000  00002978  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002e57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3f c0       	rjmp	.+126    	; 0xc8 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e3       	ldi	r30, 0x32	; 50
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 31       	cpi	r26, 0x1C	; 28
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e1       	ldi	r26, 0x1C	; 28
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 32       	cpi	r26, 0x22	; 34
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	30 d0       	rcall	.+96     	; 0x124 <main>
  c4:	b4 c0       	rjmp	.+360    	; 0x22e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_18>:

FILE OUTPUT = FDEV_SETUP_STREAM(UART1_transmit, NULL, _FDEV_SETUP_WRITE);
FILE INPUT	= FDEV_SETUP_STREAM(NULL, UART1_receive, _FDEV_SETUP_READ);

ISR(USART0_RX_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	0b b6       	in	r0, 0x3b	; 59
  d4:	0f 92       	push	r0
  d6:	2f 93       	push	r18
  d8:	3f 93       	push	r19
  da:	4f 93       	push	r20
  dc:	5f 93       	push	r21
  de:	6f 93       	push	r22
  e0:	7f 93       	push	r23
  e2:	8f 93       	push	r24
  e4:	9f 93       	push	r25
  e6:	af 93       	push	r26
  e8:	bf 93       	push	r27
  ea:	cf 93       	push	r28
  ec:	ef 93       	push	r30
  ee:	ff 93       	push	r31
	uint8_t oldSREG = SREG;			// 상태 레지스터 값 저장
  f0:	cf b7       	in	r28, 0x3f	; 63
	
	cli();							// 인터럽트 
  f2:	f8 94       	cli
	
	printf("%c", UDR0);
  f4:	8c b1       	in	r24, 0x0c	; 12
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	59 d0       	rcall	.+178    	; 0x1ac <putchar>
	
	SREG = oldSREG;					// 이전 상태 레지스터 값 복원
  fa:	cf bf       	out	0x3f, r28	; 63
}
  fc:	ff 91       	pop	r31
  fe:	ef 91       	pop	r30
 100:	cf 91       	pop	r28
 102:	bf 91       	pop	r27
 104:	af 91       	pop	r26
 106:	9f 91       	pop	r25
 108:	8f 91       	pop	r24
 10a:	7f 91       	pop	r23
 10c:	6f 91       	pop	r22
 10e:	5f 91       	pop	r21
 110:	4f 91       	pop	r20
 112:	3f 91       	pop	r19
 114:	2f 91       	pop	r18
 116:	0f 90       	pop	r0
 118:	0b be       	out	0x3b, r0	; 59
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <main>:

int main(void)
{
	stdout = &OUTPUT;					// printf 사용 설정
 124:	ec e1       	ldi	r30, 0x1C	; 28
 126:	f1 e0       	ldi	r31, 0x01	; 1
 128:	8e e0       	ldi	r24, 0x0E	; 14
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	93 83       	std	Z+3, r25	; 0x03
 12e:	82 83       	std	Z+2, r24	; 0x02
	stdin = &INPUT;						// scanf 사용 설정
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	91 e0       	ldi	r25, 0x01	; 1
 134:	91 83       	std	Z+1, r25	; 0x01
 136:	80 83       	st	Z, r24
	
	UART1_init();						// UART1 초기화
 138:	11 d0       	rcall	.+34     	; 0x15c <UART1_init>
	UART0_init();						// UART0 초기화
 13a:	03 d0       	rcall	.+6      	; 0x142 <UART0_init>
 13c:	57 9a       	sbi	0x0a, 7	; 10
	
	UCSR0B |= (1 << RXCIE0);			// 송신 가능 대기
 13e:	78 94       	sei
	sei();								// 전역적으로 인터럽트 허용
 140:	ff cf       	rjmp	.-2      	; 0x140 <main+0x1c>

00000142 <UART0_init>:
 142:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 146:	8f ec       	ldi	r24, 0xCF	; 207
 148:	89 b9       	out	0x09, r24	; 9
 14a:	59 9a       	sbi	0x0b, 1	; 11
 14c:	e5 e9       	ldi	r30, 0x95	; 149
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	86 60       	ori	r24, 0x06	; 6
 154:	80 83       	st	Z, r24
 156:	54 9a       	sbi	0x0a, 4	; 10
 158:	53 9a       	sbi	0x0a, 3	; 10
 15a:	08 95       	ret

0000015c <UART1_init>:
 15c:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 160:	8f ec       	ldi	r24, 0xCF	; 207
 162:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 166:	eb e9       	ldi	r30, 0x9B	; 155
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	82 60       	ori	r24, 0x02	; 2
 16e:	80 83       	st	Z, r24
 170:	ed e9       	ldi	r30, 0x9D	; 157
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	86 60       	ori	r24, 0x06	; 6
 178:	80 83       	st	Z, r24
 17a:	ea e9       	ldi	r30, 0x9A	; 154
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	80 61       	ori	r24, 0x10	; 16
 182:	80 83       	st	Z, r24
 184:	80 81       	ld	r24, Z
 186:	88 60       	ori	r24, 0x08	; 8
 188:	80 83       	st	Z, r24
 18a:	08 95       	ret

0000018c <UART1_transmit>:
 18c:	eb e9       	ldi	r30, 0x9B	; 155
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	90 81       	ld	r25, Z
 192:	95 ff       	sbrs	r25, 5
 194:	fd cf       	rjmp	.-6      	; 0x190 <UART1_transmit+0x4>
 196:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 19a:	08 95       	ret

0000019c <UART1_receive>:
 19c:	eb e9       	ldi	r30, 0x9B	; 155
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	88 23       	and	r24, r24
 1a4:	ec f7       	brge	.-6      	; 0x1a0 <UART1_receive+0x4>
 1a6:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 1aa:	08 95       	ret

000001ac <putchar>:
 1ac:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <__data_end+0x2>
 1b0:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <__data_end+0x3>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <fputc>

000001b6 <fputc>:
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	fb 01       	movw	r30, r22
 1c0:	23 81       	ldd	r18, Z+3	; 0x03
 1c2:	21 fd       	sbrc	r18, 1
 1c4:	03 c0       	rjmp	.+6      	; 0x1cc <fputc+0x16>
 1c6:	8f ef       	ldi	r24, 0xFF	; 255
 1c8:	9f ef       	ldi	r25, 0xFF	; 255
 1ca:	2c c0       	rjmp	.+88     	; 0x224 <fputc+0x6e>
 1cc:	22 ff       	sbrs	r18, 2
 1ce:	16 c0       	rjmp	.+44     	; 0x1fc <fputc+0x46>
 1d0:	46 81       	ldd	r20, Z+6	; 0x06
 1d2:	57 81       	ldd	r21, Z+7	; 0x07
 1d4:	24 81       	ldd	r18, Z+4	; 0x04
 1d6:	35 81       	ldd	r19, Z+5	; 0x05
 1d8:	42 17       	cp	r20, r18
 1da:	53 07       	cpc	r21, r19
 1dc:	44 f4       	brge	.+16     	; 0x1ee <fputc+0x38>
 1de:	a0 81       	ld	r26, Z
 1e0:	b1 81       	ldd	r27, Z+1	; 0x01
 1e2:	9d 01       	movw	r18, r26
 1e4:	2f 5f       	subi	r18, 0xFF	; 255
 1e6:	3f 4f       	sbci	r19, 0xFF	; 255
 1e8:	31 83       	std	Z+1, r19	; 0x01
 1ea:	20 83       	st	Z, r18
 1ec:	8c 93       	st	X, r24
 1ee:	26 81       	ldd	r18, Z+6	; 0x06
 1f0:	37 81       	ldd	r19, Z+7	; 0x07
 1f2:	2f 5f       	subi	r18, 0xFF	; 255
 1f4:	3f 4f       	sbci	r19, 0xFF	; 255
 1f6:	37 83       	std	Z+7, r19	; 0x07
 1f8:	26 83       	std	Z+6, r18	; 0x06
 1fa:	14 c0       	rjmp	.+40     	; 0x224 <fputc+0x6e>
 1fc:	8b 01       	movw	r16, r22
 1fe:	ec 01       	movw	r28, r24
 200:	fb 01       	movw	r30, r22
 202:	00 84       	ldd	r0, Z+8	; 0x08
 204:	f1 85       	ldd	r31, Z+9	; 0x09
 206:	e0 2d       	mov	r30, r0
 208:	09 95       	icall
 20a:	89 2b       	or	r24, r25
 20c:	e1 f6       	brne	.-72     	; 0x1c6 <fputc+0x10>
 20e:	d8 01       	movw	r26, r16
 210:	16 96       	adiw	r26, 0x06	; 6
 212:	8d 91       	ld	r24, X+
 214:	9c 91       	ld	r25, X
 216:	17 97       	sbiw	r26, 0x07	; 7
 218:	01 96       	adiw	r24, 0x01	; 1
 21a:	17 96       	adiw	r26, 0x07	; 7
 21c:	9c 93       	st	X, r25
 21e:	8e 93       	st	-X, r24
 220:	16 97       	sbiw	r26, 0x06	; 6
 222:	ce 01       	movw	r24, r28
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	1f 91       	pop	r17
 22a:	0f 91       	pop	r16
 22c:	08 95       	ret

0000022e <_exit>:
 22e:	f8 94       	cli

00000230 <__stop_program>:
 230:	ff cf       	rjmp	.-2      	; 0x230 <__stop_program>
