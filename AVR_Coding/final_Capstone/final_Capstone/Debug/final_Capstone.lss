
final_Capstone.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000334  000003c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000334  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080011c  0080011c  000003e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000414  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e96  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b43  00000000  00000000  000013aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000649  00000000  00000000  00001eed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  00002538  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d3  00000000  00000000  00002750  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000062b  00000000  00000000  00002d23  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  0000334e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e3       	ldi	r30, 0x34	; 52
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 31       	cpi	r26, 0x1C	; 28
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e1       	ldi	r26, 0x1C	; 28
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 32       	cpi	r26, 0x28	; 40
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	71 d0       	rcall	.+226    	; 0x1a6 <main>
  c4:	35 c1       	rjmp	.+618    	; 0x330 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_16>:

FILE INPUT	\
= FDEV_SETUP_STREAM(NULL, UART1_receive, _FDEV_SETUP_READ);

ISR(TIMER0_OVF_vect)	// 오버플로 인터럽트
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	0b b6       	in	r0, 0x3b	; 59
  d4:	0f 92       	push	r0
  d6:	cf 92       	push	r12
  d8:	df 92       	push	r13
  da:	ef 92       	push	r14
  dc:	ff 92       	push	r15
  de:	0f 93       	push	r16
  e0:	1f 93       	push	r17
  e2:	2f 93       	push	r18
  e4:	3f 93       	push	r19
  e6:	4f 93       	push	r20
  e8:	5f 93       	push	r21
  ea:	6f 93       	push	r22
  ec:	7f 93       	push	r23
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
  f2:	af 93       	push	r26
  f4:	bf 93       	push	r27
  f6:	ef 93       	push	r30
  f8:	ff 93       	push	r31
	unsigned long m = timer0_millis;
  fa:	c0 90 1e 01 	lds	r12, 0x011E	; 0x80011e <timer0_millis>
  fe:	d0 90 1f 01 	lds	r13, 0x011F	; 0x80011f <timer0_millis+0x1>
 102:	e0 90 20 01 	lds	r14, 0x0120	; 0x800120 <timer0_millis+0x2>
 106:	f0 90 21 01 	lds	r15, 0x0121	; 0x800121 <timer0_millis+0x3>
	int f = timer0_micros;
 10a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 10e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
	m += MILLIS_INCREMENT_PER_OVERFLOW;	// 밀리초 단위 시간 증가
 112:	97 01       	movw	r18, r14
 114:	86 01       	movw	r16, r12
 116:	0f 5f       	subi	r16, 0xFF	; 255
 118:	1f 4f       	sbci	r17, 0xFF	; 255
 11a:	2f 4f       	sbci	r18, 0xFF	; 255
 11c:	3f 4f       	sbci	r19, 0xFF	; 255
	f += MICROS_INCREMENT_PER_OVERFLOW;	// 마이크로초 단위 시간 증가
	
	// 마이크로초가 1,000을 넘어가면 밀리초를 증가시킴
	m += (f/1000);
 11e:	48 96       	adiw	r24, 0x18	; 24
 120:	68 ee       	ldi	r22, 0xE8	; 232
 122:	73 e0       	ldi	r23, 0x03	; 3
 124:	bc d0       	rcall	.+376    	; 0x29e <__divmodhi4>
 126:	6b 01       	movw	r12, r22
 128:	77 0f       	add	r23, r23
 12a:	ee 08       	sbc	r14, r14
 12c:	ff 08       	sbc	r15, r15
 12e:	c0 0e       	add	r12, r16
 130:	d1 1e       	adc	r13, r17
 132:	e2 1e       	adc	r14, r18
 134:	f3 1e       	adc	r15, r19
	f = m % 1000;
 136:	c7 01       	movw	r24, r14
 138:	b6 01       	movw	r22, r12
 13a:	28 ee       	ldi	r18, 0xE8	; 232
 13c:	33 e0       	ldi	r19, 0x03	; 3
 13e:	40 e0       	ldi	r20, 0x00	; 0
 140:	50 e0       	ldi	r21, 0x00	; 0
 142:	c0 d0       	rcall	.+384    	; 0x2c4 <__udivmodsi4>
	
	timer0_millis = m;
 144:	c0 92 1e 01 	sts	0x011E, r12	; 0x80011e <timer0_millis>
 148:	d0 92 1f 01 	sts	0x011F, r13	; 0x80011f <timer0_millis+0x1>
 14c:	e0 92 20 01 	sts	0x0120, r14	; 0x800120 <timer0_millis+0x2>
 150:	f0 92 21 01 	sts	0x0121, r15	; 0x800121 <timer0_millis+0x3>
	timer0_micros = f;
 154:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <__data_end+0x1>
 158:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <__data_end>
}
 15c:	ff 91       	pop	r31
 15e:	ef 91       	pop	r30
 160:	bf 91       	pop	r27
 162:	af 91       	pop	r26
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	7f 91       	pop	r23
 16a:	6f 91       	pop	r22
 16c:	5f 91       	pop	r21
 16e:	4f 91       	pop	r20
 170:	3f 91       	pop	r19
 172:	2f 91       	pop	r18
 174:	1f 91       	pop	r17
 176:	0f 91       	pop	r16
 178:	ff 90       	pop	r15
 17a:	ef 90       	pop	r14
 17c:	df 90       	pop	r13
 17e:	cf 90       	pop	r12
 180:	0f 90       	pop	r0
 182:	0b be       	out	0x3b, r0	; 59
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;	// 상태 레지스터 값 저장
 18e:	2f b7       	in	r18, 0x3f	; 63
	
	cli();		// timer0_millis 값을 읽는 동안 값이 변하지 않도록 인터럽트 비활성화
 190:	f8 94       	cli
	
	m = timer0_millis;
 192:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <timer0_millis>
 196:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <timer0_millis+0x1>
 19a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <timer0_millis+0x2>
 19e:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <timer0_millis+0x3>
	
	SREG = oldSREG;		// 이전 상태 레지스터 값 복원
 1a2:	2f bf       	out	0x3f, r18	; 63
	
	return m;			// 프로그램 시작 후 경과 시간
}
 1a4:	08 95       	ret

000001a6 <main>:


int main(void)
{
	stdout = &OUTPUT;							// printf 사용 설정
 1a6:	e2 e2       	ldi	r30, 0x22	; 34
 1a8:	f1 e0       	ldi	r31, 0x01	; 1
 1aa:	8e e0       	ldi	r24, 0x0E	; 14
 1ac:	91 e0       	ldi	r25, 0x01	; 1
 1ae:	93 83       	std	Z+3, r25	; 0x03
 1b0:	82 83       	std	Z+2, r24	; 0x02
	stdin = &INPUT;								// scanf 사용 설정
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	91 83       	std	Z+1, r25	; 0x01
 1b8:	80 83       	st	Z, r24
	DDRF &= ~0x01;
 1ba:	e1 e6       	ldi	r30, 0x61	; 97
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	8e 7f       	andi	r24, 0xFE	; 254
 1c2:	80 83       	st	Z, r24
	
	UART1_init();								// UART1 초기화
 1c4:	44 d0       	rcall	.+136    	; 0x24e <UART1_init>
	UART0_init();
 1c6:	32 d0       	rcall	.+100    	; 0x22c <UART0_init>
 1c8:	83 b7       	in	r24, 0x33	; 51
	
	TCCR0 |= (1 << CS02);	//분주비를 64로 설정
 1ca:	84 60       	ori	r24, 0x04	; 4
 1cc:	83 bf       	out	0x33, r24	; 51
 1ce:	87 b7       	in	r24, 0x37	; 55
	TIMSK |= (1 << TOIE0);	// 오버플로 인터럽트 허용
 1d0:	81 60       	ori	r24, 0x01	; 1
 1d2:	87 bf       	out	0x37, r24	; 55
	
	sei();				// 전역적으로 인터럽트 허용
 1d4:	78 94       	sei
	
	int current_pirstate, previous_pirstate;
	unsigned long time_previous, time_current;
	
	time_previous = millis();		// 시작 시간
 1d6:	db df       	rcall	.-74     	; 0x18e <millis>
 1d8:	4b 01       	movw	r8, r22
 1da:	5c 01       	movw	r10, r24
 1dc:	80 b1       	in	r24, 0x00	; 0
	previous_pirstate = (PINF & 0x01);
 1de:	08 2f       	mov	r16, r24
 1e0:	01 70       	andi	r16, 0x01	; 1
 1e2:	10 e0       	ldi	r17, 0x00	; 0
	
	while (1)
	{
		char data_in = 0;
		time_current = millis();
 1e4:	d4 df       	rcall	.-88     	; 0x18e <millis>
 1e6:	6b 01       	movw	r12, r22
 1e8:	7c 01       	movw	r14, r24
 1ea:	80 b1       	in	r24, 0x00	; 0
		current_pirstate = (PINF & 0x01);
 1ec:	81 70       	andi	r24, 0x01	; 1
 1ee:	c8 2f       	mov	r28, r24
 1f0:	20 e0       	ldi	r18, 0x00	; 0
 1f2:	d2 2f       	mov	r29, r18
 1f4:	0c 17       	cp	r16, r28
		if((previous_pirstate != current_pirstate) || ((time_current - time_previous) > 5000))
 1f6:	1d 07       	cpc	r17, r29
 1f8:	59 f4       	brne	.+22     	; 0x210 <main+0x6a>
 1fa:	d7 01       	movw	r26, r14
 1fc:	c6 01       	movw	r24, r12
 1fe:	88 19       	sub	r24, r8
 200:	99 09       	sbc	r25, r9
 202:	aa 09       	sbc	r26, r10
 204:	bb 09       	sbc	r27, r11
 206:	89 38       	cpi	r24, 0x89	; 137
 208:	93 41       	sbci	r25, 0x13	; 19
 20a:	a1 05       	cpc	r26, r1
 20c:	b1 05       	cpc	r27, r1
 20e:	50 f3       	brcs	.-44     	; 0x1e4 <main+0x3e>
		{
			time_previous = time_current;
			previous_pirstate = current_pirstate;
			if(current_pirstate)
 210:	20 97       	sbiw	r28, 0x00	; 0
 212:	31 f0       	breq	.+12     	; 0x220 <main+0x7a>
				{
					data_in = 'a';
					UART0_transmit(data_in);
 214:	81 e6       	ldi	r24, 0x61	; 97
 216:	17 d0       	rcall	.+46     	; 0x246 <UART0_transmit>
 218:	46 01       	movw	r8, r12
		char data_in = 0;
		time_current = millis();
		current_pirstate = (PINF & 0x01);
		if((previous_pirstate != current_pirstate) || ((time_current - time_previous) > 5000))
		{
			time_previous = time_current;
 21a:	57 01       	movw	r10, r14
			previous_pirstate = current_pirstate;
 21c:	8e 01       	movw	r16, r28
 21e:	e2 cf       	rjmp	.-60     	; 0x1e4 <main+0x3e>
					//printf("B", data_in);
				}
			else
				{
					data_in = 'b';
					UART0_transmit(data_in);
 220:	82 e6       	ldi	r24, 0x62	; 98
 222:	11 d0       	rcall	.+34     	; 0x246 <UART0_transmit>
 224:	46 01       	movw	r8, r12
		char data_in = 0;
		time_current = millis();
		current_pirstate = (PINF & 0x01);
		if((previous_pirstate != current_pirstate) || ((time_current - time_previous) > 5000))
		{
			time_previous = time_current;
 226:	57 01       	movw	r10, r14
 228:	8e 01       	movw	r16, r28
			previous_pirstate = current_pirstate;
 22a:	dc cf       	rjmp	.-72     	; 0x1e4 <main+0x3e>

0000022c <UART0_init>:
 22c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 230:	8f ec       	ldi	r24, 0xCF	; 207
 232:	89 b9       	out	0x09, r24	; 9
 234:	59 9a       	sbi	0x0b, 1	; 11
 236:	e5 e9       	ldi	r30, 0x95	; 149
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	86 60       	ori	r24, 0x06	; 6
 23e:	80 83       	st	Z, r24
 240:	54 9a       	sbi	0x0a, 4	; 10
 242:	53 9a       	sbi	0x0a, 3	; 10
 244:	08 95       	ret

00000246 <UART0_transmit>:
 246:	5d 9b       	sbis	0x0b, 5	; 11
 248:	fe cf       	rjmp	.-4      	; 0x246 <UART0_transmit>
 24a:	8c b9       	out	0x0c, r24	; 12
 24c:	08 95       	ret

0000024e <UART1_init>:
 24e:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 252:	8f ec       	ldi	r24, 0xCF	; 207
 254:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 258:	eb e9       	ldi	r30, 0x9B	; 155
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	82 60       	ori	r24, 0x02	; 2
 260:	80 83       	st	Z, r24
 262:	ed e9       	ldi	r30, 0x9D	; 157
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	86 60       	ori	r24, 0x06	; 6
 26a:	80 83       	st	Z, r24
 26c:	ea e9       	ldi	r30, 0x9A	; 154
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	80 61       	ori	r24, 0x10	; 16
 274:	80 83       	st	Z, r24
 276:	80 81       	ld	r24, Z
 278:	88 60       	ori	r24, 0x08	; 8
 27a:	80 83       	st	Z, r24
 27c:	08 95       	ret

0000027e <UART1_transmit>:
 27e:	eb e9       	ldi	r30, 0x9B	; 155
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	90 81       	ld	r25, Z
 284:	95 ff       	sbrs	r25, 5
 286:	fd cf       	rjmp	.-6      	; 0x282 <UART1_transmit+0x4>
 288:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 28c:	08 95       	ret

0000028e <UART1_receive>:
 28e:	eb e9       	ldi	r30, 0x9B	; 155
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 81       	ld	r24, Z
 294:	88 23       	and	r24, r24
 296:	ec f7       	brge	.-6      	; 0x292 <UART1_receive+0x4>
 298:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 29c:	08 95       	ret

0000029e <__divmodhi4>:
 29e:	97 fb       	bst	r25, 7
 2a0:	07 2e       	mov	r0, r23
 2a2:	16 f4       	brtc	.+4      	; 0x2a8 <__divmodhi4+0xa>
 2a4:	00 94       	com	r0
 2a6:	06 d0       	rcall	.+12     	; 0x2b4 <__divmodhi4_neg1>
 2a8:	77 fd       	sbrc	r23, 7
 2aa:	08 d0       	rcall	.+16     	; 0x2bc <__divmodhi4_neg2>
 2ac:	2d d0       	rcall	.+90     	; 0x308 <__udivmodhi4>
 2ae:	07 fc       	sbrc	r0, 7
 2b0:	05 d0       	rcall	.+10     	; 0x2bc <__divmodhi4_neg2>
 2b2:	3e f4       	brtc	.+14     	; 0x2c2 <__divmodhi4_exit>

000002b4 <__divmodhi4_neg1>:
 2b4:	90 95       	com	r25
 2b6:	81 95       	neg	r24
 2b8:	9f 4f       	sbci	r25, 0xFF	; 255
 2ba:	08 95       	ret

000002bc <__divmodhi4_neg2>:
 2bc:	70 95       	com	r23
 2be:	61 95       	neg	r22
 2c0:	7f 4f       	sbci	r23, 0xFF	; 255

000002c2 <__divmodhi4_exit>:
 2c2:	08 95       	ret

000002c4 <__udivmodsi4>:
 2c4:	a1 e2       	ldi	r26, 0x21	; 33
 2c6:	1a 2e       	mov	r1, r26
 2c8:	aa 1b       	sub	r26, r26
 2ca:	bb 1b       	sub	r27, r27
 2cc:	fd 01       	movw	r30, r26
 2ce:	0d c0       	rjmp	.+26     	; 0x2ea <__udivmodsi4_ep>

000002d0 <__udivmodsi4_loop>:
 2d0:	aa 1f       	adc	r26, r26
 2d2:	bb 1f       	adc	r27, r27
 2d4:	ee 1f       	adc	r30, r30
 2d6:	ff 1f       	adc	r31, r31
 2d8:	a2 17       	cp	r26, r18
 2da:	b3 07       	cpc	r27, r19
 2dc:	e4 07       	cpc	r30, r20
 2de:	f5 07       	cpc	r31, r21
 2e0:	20 f0       	brcs	.+8      	; 0x2ea <__udivmodsi4_ep>
 2e2:	a2 1b       	sub	r26, r18
 2e4:	b3 0b       	sbc	r27, r19
 2e6:	e4 0b       	sbc	r30, r20
 2e8:	f5 0b       	sbc	r31, r21

000002ea <__udivmodsi4_ep>:
 2ea:	66 1f       	adc	r22, r22
 2ec:	77 1f       	adc	r23, r23
 2ee:	88 1f       	adc	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	1a 94       	dec	r1
 2f4:	69 f7       	brne	.-38     	; 0x2d0 <__udivmodsi4_loop>
 2f6:	60 95       	com	r22
 2f8:	70 95       	com	r23
 2fa:	80 95       	com	r24
 2fc:	90 95       	com	r25
 2fe:	9b 01       	movw	r18, r22
 300:	ac 01       	movw	r20, r24
 302:	bd 01       	movw	r22, r26
 304:	cf 01       	movw	r24, r30
 306:	08 95       	ret

00000308 <__udivmodhi4>:
 308:	aa 1b       	sub	r26, r26
 30a:	bb 1b       	sub	r27, r27
 30c:	51 e1       	ldi	r21, 0x11	; 17
 30e:	07 c0       	rjmp	.+14     	; 0x31e <__udivmodhi4_ep>

00000310 <__udivmodhi4_loop>:
 310:	aa 1f       	adc	r26, r26
 312:	bb 1f       	adc	r27, r27
 314:	a6 17       	cp	r26, r22
 316:	b7 07       	cpc	r27, r23
 318:	10 f0       	brcs	.+4      	; 0x31e <__udivmodhi4_ep>
 31a:	a6 1b       	sub	r26, r22
 31c:	b7 0b       	sbc	r27, r23

0000031e <__udivmodhi4_ep>:
 31e:	88 1f       	adc	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	5a 95       	dec	r21
 324:	a9 f7       	brne	.-22     	; 0x310 <__udivmodhi4_loop>
 326:	80 95       	com	r24
 328:	90 95       	com	r25
 32a:	bc 01       	movw	r22, r24
 32c:	cd 01       	movw	r24, r26
 32e:	08 95       	ret

00000330 <_exit>:
 330:	f8 94       	cli

00000332 <__stop_program>:
 332:	ff cf       	rjmp	.-2      	; 0x332 <__stop_program>
